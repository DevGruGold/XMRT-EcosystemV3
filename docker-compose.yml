version: '3.8'

services:
  # Frontend - Next.js Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000
      - NEXT_PUBLIC_CHAIN_ID=31337
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    networks:
      - xmrt-network
    restart: unless-stopped

  # Backend - Node.js Express API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=development
      - PORT=8000
      - DATABASE_URL=postgresql://xmrt_user:xmrt_password@postgres:5432/xmrt_db
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-jwt-secret-key-change-in-production
      - BLOCKCHAIN_RPC_URL=http://hardhat:8545
      - AI_API_KEY=${AI_API_KEY}
      - MONERO_RPC_URL=http://monero:18081
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      - postgres
      - redis
      - hardhat
    networks:
      - xmrt-network
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=xmrt_db
      - POSTGRES_USER=xmrt_user
      - POSTGRES_PASSWORD=xmrt_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - xmrt-network
    restart: unless-stopped

  # Redis Cache & Session Store
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - xmrt-network
    restart: unless-stopped

  # Hardhat Local Blockchain
  hardhat:
    build:
      context: ./contracts
      dockerfile: Dockerfile.dev
    ports:
      - "8545:8545"
    environment:
      - NODE_ENV=development
    volumes:
      - ./contracts:/app
      - /app/node_modules
    networks:
      - xmrt-network
    restart: unless-stopped
    command: npx hardhat node --hostname 0.0.0.0

  # Monero Daemon (Testnet)
  monero:
    image: sethsimmons/simple-monerod:latest
    ports:
      - "18080:18080"
      - "18081:18081"
    environment:
      - TESTNET=1
      - RPC_BIND_IP=0.0.0.0
      - RPC_BIND_PORT=18081
      - CONFIRM_EXTERNAL_BIND=1
    volumes:
      - monero_data:/home/monero/.bitmonero
    networks:
      - xmrt-network
    restart: unless-stopped

  # AI Governance Agent
  ai-governance:
    build:
      context: ./ai-agents/governance
      dockerfile: Dockerfile.dev
    environment:
      - NODE_ENV=development
      - API_URL=http://backend:8000
      - AI_MODEL=gpt-4
      - AI_API_KEY=${AI_API_KEY}
      - AGENT_TYPE=governance
    volumes:
      - ./ai-agents/governance:/app
      - /app/node_modules
    depends_on:
      - backend
      - redis
    networks:
      - xmrt-network
    restart: unless-stopped

  # AI Treasury Agent
  ai-treasury:
    build:
      context: ./ai-agents/treasury
      dockerfile: Dockerfile.dev
    environment:
      - NODE_ENV=development
      - API_URL=http://backend:8000
      - AI_MODEL=gpt-4
      - AI_API_KEY=${AI_API_KEY}
      - AGENT_TYPE=treasury
    volumes:
      - ./ai-agents/treasury:/app
      - /app/node_modules
    depends_on:
      - backend
      - redis
    networks:
      - xmrt-network
    restart: unless-stopped

  # AI Community Agent
  ai-community:
    build:
      context: ./ai-agents/community
      dockerfile: Dockerfile.dev
    environment:
      - NODE_ENV=development
      - API_URL=http://backend:8000
      - AI_MODEL=gpt-4
      - AI_API_KEY=${AI_API_KEY}
      - AGENT_TYPE=community
    volumes:
      - ./ai-agents/community:/app
      - /app/node_modules
    depends_on:
      - backend
      - redis
    networks:
      - xmrt-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - xmrt-network
    restart: unless-stopped

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - xmrt-network
    restart: unless-stopped

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - xmrt-network
    restart: unless-stopped

networks:
  xmrt-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  monero_data:
  prometheus_data:
  grafana_data:

# Production Profile
profiles:
  production:
    services:
      frontend:
        build:
          dockerfile: Dockerfile.prod
        environment:
          - NODE_ENV=production
          - NEXT_PUBLIC_API_URL=https://api.xmrt.io
          - NEXT_PUBLIC_WS_URL=wss://api.xmrt.io

      backend:
        build:
          dockerfile: Dockerfile.prod
        environment:
          - NODE_ENV=production
          - DATABASE_URL=${DATABASE_URL}
          - REDIS_URL=${REDIS_URL}
          - JWT_SECRET=${JWT_SECRET}

      postgres:
        image: postgres:15
        environment:
          - POSTGRES_DB=${POSTGRES_DB}
          - POSTGRES_USER=${POSTGRES_USER}
          - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
